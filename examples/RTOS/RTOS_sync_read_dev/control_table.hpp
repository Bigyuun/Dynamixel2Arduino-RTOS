#pragma once

#ifndef CONTROL_TABLE_HPP_
#define CONTROL_TABLE_HPP_

/**********************************************************************************************************
* @author DY
* @brief 
*   Model : XC330-T288-T
*   Specification : https://emanual.robotis.com/docs/en/dxl/x/xc330-t288/#control-table-data-address
**********************************************************************************************************/
#include <iostream>
#include <map>
#include <string>
#include <actuator.h>
#include <array>
#include <utility>
/**
* @author DY
* @note Control Table parameters
    Address ID
    Address length
*/
///////////////////////////////////////////////////////////////////////////////////////
// Address ID
///////////////////////////////////////////////////////////////////////////////////////

// EEPROM area
#define ADDR_MODEL_UMBER            0
#define ADDR_MODEL_INFORMATION      2
#define ADDR_FIRMWARE_VERSION       6
#define ADDR_ID                     7
#define ADDR_BAUD_RATE              8
#define ADDR_RETURN_DELAY           9
#define ADDR_DRIVE_MODE             10
#define ADDR_OPERATING_MODE         11
#define ADDR_SECONDARY_ID           12
#define ADDR_PROTOCOL_TYPE          13
#define ADDR_HOMING_OFFSET          20
#define ADDR_MOVING_THRESHOLD       24
#define ADDR_TEMPERATURE_LIMIT      31
#define ADDR_MAX_VOLTAGE            32
#define ADDR_MIN_VOLTAGE            34
#define ADDR_PWM_LIMIT              36
#define ADDR_CURRENT_LIMIT          38
#define ADDR_VELOCITY_LIMIT         44
#define ADDR_MAX_POSITION           48
#define ADDR_MIN_POSITION           52
#define ADDR_STARTUP_CONFIGURATION  60
#define ADDR_PWM_SLOPE              62
#define ADDR_SHUTDOWN               63

// RAM area
#define ADDR_TORQUE_ENABLE          64
#define ADDR_LED                    65
#define ADDR_STATUS_RETURN          68
#define ADDR_REGISTERED_INSTRUCTION 69
#define ADDR_HARDWARE_ERROR         70
#define ADDR_VELOCITY_I             76
#define ADDR_VELOCITY_P             78
#define ADDR_POSITION_D             80
#define ADDR_POSITION_I             82
#define ADDR_POSITION_P             84
#define ADDR_FEEDFORWARD_2ND        88
#define ADDR_FEEDFORWARD_1ST        90
#define ADDR_BUS_WATCHDOG           98
#define ADDR_GOAL_PWM               100
#define ADDR_GOAL_CURRENT           102
#define ADDR_GOAL_VELOCITY          104
#define ADDR_PROFILE_ACCELERATION   108
#define ADDR_PROFILE_VELOCITY       112
#define ADDR_GOAL_POSITION          116
#define ADDR_REALTIME_TICK          120
#define ADDR_MOVING                 122
#define ADDR_MOVING_STATUS          123
#define ADDR_PRESENT_PWM            124
#define ADDR_PRESENT_CURRENT        126
#define ADDR_PRESENT_VELOCITY       128
#define ADDR_PRESENT_POSITION       132
#define ADDR_VELOCITY_TRAJECTORY    136
#define ADDR_POSITION_TRAJECTORY    140
#define ADDR_PRESENT_INPUT          144
#define ADDR_PRESENT_TEMPERATURE    146


///////////////////////////////////////////////////////////////////////////////////////
// Address length
///////////////////////////////////////////////////////////////////////////////////////

// EEPROM area
#define ADDR_LEN_MODEL_UMBER            2
#define ADDR_LEN_MODEL_INFORMATION      4
#define ADDR_LEN_FIRMWARE_VERSION       1
#define ADDR_LEN_ID                     1
#define ADDR_LEN_BAUD_RATE              1
#define ADDR_LEN_RETURN_DELAY           1
#define ADDR_LEN_DRIVE_MODE             1
#define ADDR_LEN_OPERATING_MODE         1
#define ADDR_LEN_SECONDARY_ID           1
#define ADDR_LEN_PROTOCOL_TYPE          1
#define ADDR_LEN_HOMING_OFFSET          4
#define ADDR_LEN_MOVING_THRESHOLD       4
#define ADDR_LEN_TEMPERATURE_LIMIT      1
#define ADDR_LEN_MAX_VOLTAGE            2
#define ADDR_LEN_MIN_VOLTAGE            2
#define ADDR_LEN_PWM_LIMIT              2
#define ADDR_LEN_CURRENT_LIMIT          2
#define ADDR_LEN_VELOCITY_LIMIT         4
#define ADDR_LEN_MAX_POSITION           4
#define ADDR_LEN_MIN_POSITION           4
#define ADDR_LEN_STARTUP_CONFIGURATION  1
#define ADDR_LEN_PWM_SLOPE              1
#define ADDR_LEN_SHUTDOWN               1

// RAM area
#define ADDR_LEN_TORQUE_ENABLE          1
#define ADDR_LEN_LED                    1
#define ADDR_LEN_STATUS_RETURN          1
#define ADDR_LEN_REGISTERED_INSTRUCTION 1
#define ADDR_LEN_HARDWARE_ERROR         1
#define ADDR_LEN_VELOCITY_I             2
#define ADDR_LEN_VELOCITY_P             2
#define ADDR_LEN_POSITION_D             2
#define ADDR_LEN_POSITION_I             2
#define ADDR_LEN_POSITION_P             2
#define ADDR_LEN_FEEDFORWARD_2ND        2
#define ADDR_LEN_FEEDFORWARD_1ST        2
#define ADDR_LEN_BUS_WATCHDOG           1
#define ADDR_LEN_GOAL_PWM               2
#define ADDR_LEN_GOAL_CURRENT           2
#define ADDR_LEN_GOAL_VELOCITY          4
#define ADDR_LEN_PROFILE_ACCELERATION   4
#define ADDR_LEN_PROFILE_VELOCITY       4
#define ADDR_LEN_GOAL_POSITION          4
#define ADDR_LEN_REALTIME_TICK          2
#define ADDR_LEN_MOVING                 1
#define ADDR_LEN_MOVING_STATUS          1
#define ADDR_LEN_PRESENT_PWM            2
#define ADDR_LEN_PRESENT_CURRENT        2   // unit : 1.0 mA
#define ADDR_LEN_PRESENT_VELOCITY       4   // unit : 0.229 rev/min
#define ADDR_LEN_PRESENT_POSITION       4   // unit : 1 pulse
#define ADDR_LEN_VELOCITY_TRAJECTORY    4
#define ADDR_LEN_POSITION_TRAJECTORY    4
#define ADDR_LEN_PRESENT_INPUT          2
#define ADDR_LEN_PRESENT_TEMPERATURE    1



//This namespace is required to use Control table item names
using namespace ControlTableItem;

std::array<std::pair<const char*, ControlTableItemIndex>, LAST_DUMMY_ITEM> controlTableMap = {{
    #define MAP_STRING_TO_ENUM_VARIABLE(name) {#name, name}
    MAP_STRING_TO_ENUM_VARIABLE(MODEL_NUMBER),
    MAP_STRING_TO_ENUM_VARIABLE(MODEL_INFORMATION),
    MAP_STRING_TO_ENUM_VARIABLE(FIRMWARE_VERSION),
    MAP_STRING_TO_ENUM_VARIABLE(PROTOCOL_VERSION),
    MAP_STRING_TO_ENUM_VARIABLE(ID),
    MAP_STRING_TO_ENUM_VARIABLE(SECONDARY_ID),
    MAP_STRING_TO_ENUM_VARIABLE(BAUD_RATE),
    MAP_STRING_TO_ENUM_VARIABLE(DRIVE_MODE),
    MAP_STRING_TO_ENUM_VARIABLE(CONTROL_MODE),
    MAP_STRING_TO_ENUM_VARIABLE(OPERATING_MODE),
    MAP_STRING_TO_ENUM_VARIABLE(CW_ANGLE_LIMIT),
    MAP_STRING_TO_ENUM_VARIABLE(CCW_ANGLE_LIMIT),
    MAP_STRING_TO_ENUM_VARIABLE(TEMPERATURE_LIMIT),
    MAP_STRING_TO_ENUM_VARIABLE(MIN_VOLTAGE_LIMIT),
    MAP_STRING_TO_ENUM_VARIABLE(MAX_VOLTAGE_LIMIT),
    MAP_STRING_TO_ENUM_VARIABLE(PWM_LIMIT),
    MAP_STRING_TO_ENUM_VARIABLE(CURRENT_LIMIT),
    MAP_STRING_TO_ENUM_VARIABLE(VELOCITY_LIMIT),
    MAP_STRING_TO_ENUM_VARIABLE(MAX_POSITION_LIMIT),
    MAP_STRING_TO_ENUM_VARIABLE(MIN_POSITION_LIMIT),
    MAP_STRING_TO_ENUM_VARIABLE(ACCELERATION_LIMIT),
    MAP_STRING_TO_ENUM_VARIABLE(MAX_TORQUE),
    MAP_STRING_TO_ENUM_VARIABLE(HOMING_OFFSET),
    MAP_STRING_TO_ENUM_VARIABLE(MOVING_THRESHOLD),
    MAP_STRING_TO_ENUM_VARIABLE(MULTI_TURN_OFFSET),
    MAP_STRING_TO_ENUM_VARIABLE(RESOLUTION_DIVIDER),
    MAP_STRING_TO_ENUM_VARIABLE(EXTERNAL_PORT_MODE_1),
    MAP_STRING_TO_ENUM_VARIABLE(EXTERNAL_PORT_MODE_2),
    MAP_STRING_TO_ENUM_VARIABLE(EXTERNAL_PORT_MODE_3),
    MAP_STRING_TO_ENUM_VARIABLE(EXTERNAL_PORT_MODE_4),
    MAP_STRING_TO_ENUM_VARIABLE(STATUS_RETURN_LEVEL),
    MAP_STRING_TO_ENUM_VARIABLE(RETURN_DELAY_TIME),
    MAP_STRING_TO_ENUM_VARIABLE(ALARM_LED),
    MAP_STRING_TO_ENUM_VARIABLE(SHUTDOWN),

    MAP_STRING_TO_ENUM_VARIABLE(TORQUE_ENABLE),
    MAP_STRING_TO_ENUM_VARIABLE(LED),
    MAP_STRING_TO_ENUM_VARIABLE(LED_RED),
    MAP_STRING_TO_ENUM_VARIABLE(LED_GREEN),
    MAP_STRING_TO_ENUM_VARIABLE(LED_BLUE),
    MAP_STRING_TO_ENUM_VARIABLE(REGISTERED_INSTRUCTION),
    MAP_STRING_TO_ENUM_VARIABLE(HARDWARE_ERROR_STATUS),
    MAP_STRING_TO_ENUM_VARIABLE(VELOCITY_P_GAIN),
    MAP_STRING_TO_ENUM_VARIABLE(VELOCITY_I_GAIN),
    MAP_STRING_TO_ENUM_VARIABLE(POSITION_P_GAIN),
    MAP_STRING_TO_ENUM_VARIABLE(POSITION_I_GAIN),
    MAP_STRING_TO_ENUM_VARIABLE(POSITION_D_GAIN),
    MAP_STRING_TO_ENUM_VARIABLE(FEEDFORWARD_1ST_GAIN),
    MAP_STRING_TO_ENUM_VARIABLE(FEEDFORWARD_2ND_GAIN),
    MAP_STRING_TO_ENUM_VARIABLE(P_GAIN),
    MAP_STRING_TO_ENUM_VARIABLE(I_GAIN),
    MAP_STRING_TO_ENUM_VARIABLE(D_GAIN),
    MAP_STRING_TO_ENUM_VARIABLE(CW_COMPLIANCE_MARGIN),
    MAP_STRING_TO_ENUM_VARIABLE(CCW_COMPLIANCE_MARGIN),
    MAP_STRING_TO_ENUM_VARIABLE(CW_COMPLIANCE_SLOPE),
    MAP_STRING_TO_ENUM_VARIABLE(CCW_COMPLIANCE_SLOPE),
    MAP_STRING_TO_ENUM_VARIABLE(GOAL_PWM),
    MAP_STRING_TO_ENUM_VARIABLE(GOAL_TORQUE),
    MAP_STRING_TO_ENUM_VARIABLE(GOAL_CURRENT),
    MAP_STRING_TO_ENUM_VARIABLE(GOAL_POSITION),
    MAP_STRING_TO_ENUM_VARIABLE(GOAL_VELOCITY),
    MAP_STRING_TO_ENUM_VARIABLE(GOAL_ACCELERATION),
    MAP_STRING_TO_ENUM_VARIABLE(MOVING_SPEED),
    MAP_STRING_TO_ENUM_VARIABLE(PRESENT_PWM),
    MAP_STRING_TO_ENUM_VARIABLE(PRESENT_LOAD),
    MAP_STRING_TO_ENUM_VARIABLE(PRESENT_SPEED),
    MAP_STRING_TO_ENUM_VARIABLE(PRESENT_CURRENT),
    MAP_STRING_TO_ENUM_VARIABLE(PRESENT_POSITION),
    MAP_STRING_TO_ENUM_VARIABLE(PRESENT_VELOCITY),
    MAP_STRING_TO_ENUM_VARIABLE(PRESENT_VOLTAGE),
    MAP_STRING_TO_ENUM_VARIABLE(PRESENT_TEMPERATURE),
    MAP_STRING_TO_ENUM_VARIABLE(TORQUE_LIMIT),
    MAP_STRING_TO_ENUM_VARIABLE(REGISTERED),
    MAP_STRING_TO_ENUM_VARIABLE(MOVING),
    MAP_STRING_TO_ENUM_VARIABLE(LOCK),
    MAP_STRING_TO_ENUM_VARIABLE(PUNCH),
    MAP_STRING_TO_ENUM_VARIABLE(CURRENT),
    MAP_STRING_TO_ENUM_VARIABLE(SENSED_CURRENT),
    MAP_STRING_TO_ENUM_VARIABLE(REALTIME_TICK),
    MAP_STRING_TO_ENUM_VARIABLE(TORQUE_CTRL_MODE_ENABLE),
    MAP_STRING_TO_ENUM_VARIABLE(BUS_WATCHDOG),
    MAP_STRING_TO_ENUM_VARIABLE(PROFILE_ACCELERATION),
    MAP_STRING_TO_ENUM_VARIABLE(PROFILE_VELOCITY),
    MAP_STRING_TO_ENUM_VARIABLE(MOVING_STATUS),
    MAP_STRING_TO_ENUM_VARIABLE(VELOCITY_TRAJECTORY),
    MAP_STRING_TO_ENUM_VARIABLE(POSITION_TRAJECTORY),
    MAP_STRING_TO_ENUM_VARIABLE(PRESENT_INPUT_VOLTAGE),
    MAP_STRING_TO_ENUM_VARIABLE(EXTERNAL_PORT_DATA_1),
    MAP_STRING_TO_ENUM_VARIABLE(EXTERNAL_PORT_DATA_2),
    MAP_STRING_TO_ENUM_VARIABLE(EXTERNAL_PORT_DATA_3),
    MAP_STRING_TO_ENUM_VARIABLE(EXTERNAL_PORT_DATA_4),

    MAP_STRING_TO_ENUM_VARIABLE(LAST_DUMMY_ITEM),
    #undef MAP_STRING_TO_ENUM_VARIABLE
}};

ControlTableItemIndex findIndex(const std::string& name) {
    for (const auto& item : controlTableMap) {
        if (item.first == name) {
            return item.second;
        }
    }
    return LAST_DUMMY_ITEM; // 찾지 못한 경우
}

#endif /* CONTROL_TABLE_HPP_ */
